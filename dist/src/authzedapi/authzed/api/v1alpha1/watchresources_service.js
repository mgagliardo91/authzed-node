"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WatchResourcesService = exports.WatchResourcesResponse = exports.PermissionUpdate = exports.WatchResourcesRequest = exports.PermissionUpdate_Permissionship = void 0;
// @generated by protobuf-ts 2.0.7 with parameter generate_dependencies,long_type_string,client_grpc1
// @generated from protobuf file "authzed/api/v1alpha1/watchresources_service.proto" (package "authzed.api.v1alpha1", syntax proto3)
// tslint:disable
const runtime_rpc_1 = require("@protobuf-ts/runtime-rpc");
const runtime_1 = require("@protobuf-ts/runtime");
const runtime_2 = require("@protobuf-ts/runtime");
const runtime_3 = require("@protobuf-ts/runtime");
const runtime_4 = require("@protobuf-ts/runtime");
const runtime_5 = require("@protobuf-ts/runtime");
const core_1 = require("../v1/core");
const core_2 = require("../v1/core");
const core_3 = require("../v1/core");
/**
 * todo: work this into the v1 core API at some point since it's used
 * across services.
 *
 * @generated from protobuf enum authzed.api.v1alpha1.PermissionUpdate.Permissionship
 */
var PermissionUpdate_Permissionship;
(function (PermissionUpdate_Permissionship) {
    /**
     * @generated from protobuf enum value: PERMISSIONSHIP_UNSPECIFIED = 0;
     */
    PermissionUpdate_Permissionship[PermissionUpdate_Permissionship["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from protobuf enum value: PERMISSIONSHIP_NO_PERMISSION = 1;
     */
    PermissionUpdate_Permissionship[PermissionUpdate_Permissionship["NO_PERMISSION"] = 1] = "NO_PERMISSION";
    /**
     * @generated from protobuf enum value: PERMISSIONSHIP_HAS_PERMISSION = 2;
     */
    PermissionUpdate_Permissionship[PermissionUpdate_Permissionship["HAS_PERMISSION"] = 2] = "HAS_PERMISSION";
})(PermissionUpdate_Permissionship = exports.PermissionUpdate_Permissionship || (exports.PermissionUpdate_Permissionship = {}));
// @generated message type with reflection information, may provide speed optimized methods
class WatchResourcesRequest$Type extends runtime_5.MessageType {
    constructor() {
        super("authzed.api.v1alpha1.WatchResourcesRequest", [
            { no: 1, name: "resource_object_type", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxBytes: "128", pattern: "^([a-z][a-z0-9_]{1,61}[a-z0-9]/)?[a-z][a-z0-9_]{1,62}[a-z0-9]$" } } } },
            { no: 2, name: "permission", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxBytes: "64", pattern: "^[a-z][a-z0-9_]{1,62}[a-z0-9]$" } } } },
            { no: 3, name: "subject_object_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "optional_subject_relation", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "optional_start_cursor", kind: "message", T: () => core_3.ZedToken }
        ]);
    }
    create(value) {
        const message = { resourceObjectType: "", permission: "", subjectObjectType: "", optionalSubjectRelation: "" };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            runtime_3.reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string resource_object_type */ 1:
                    message.resourceObjectType = reader.string();
                    break;
                case /* string permission */ 2:
                    message.permission = reader.string();
                    break;
                case /* string subject_object_type */ 3:
                    message.subjectObjectType = reader.string();
                    break;
                case /* string optional_subject_relation */ 4:
                    message.optionalSubjectRelation = reader.string();
                    break;
                case /* authzed.api.v1.ZedToken optional_start_cursor */ 5:
                    message.optionalStartCursor = core_3.ZedToken.internalBinaryRead(reader, reader.uint32(), options, message.optionalStartCursor);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string resource_object_type = 1; */
        if (message.resourceObjectType !== "")
            writer.tag(1, runtime_1.WireType.LengthDelimited).string(message.resourceObjectType);
        /* string permission = 2; */
        if (message.permission !== "")
            writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.permission);
        /* string subject_object_type = 3; */
        if (message.subjectObjectType !== "")
            writer.tag(3, runtime_1.WireType.LengthDelimited).string(message.subjectObjectType);
        /* string optional_subject_relation = 4; */
        if (message.optionalSubjectRelation !== "")
            writer.tag(4, runtime_1.WireType.LengthDelimited).string(message.optionalSubjectRelation);
        /* authzed.api.v1.ZedToken optional_start_cursor = 5; */
        if (message.optionalStartCursor)
            core_3.ZedToken.internalBinaryWrite(message.optionalStartCursor, writer.tag(5, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v1alpha1.WatchResourcesRequest
 */
exports.WatchResourcesRequest = new WatchResourcesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PermissionUpdate$Type extends runtime_5.MessageType {
    constructor() {
        super("authzed.api.v1alpha1.PermissionUpdate", [
            { no: 1, name: "subject", kind: "message", T: () => core_2.SubjectReference },
            { no: 2, name: "resource", kind: "message", T: () => core_1.ObjectReference },
            { no: 3, name: "relation", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "updated_permission", kind: "enum", T: () => ["authzed.api.v1alpha1.PermissionUpdate.Permissionship", PermissionUpdate_Permissionship, "PERMISSIONSHIP_"] }
        ]);
    }
    create(value) {
        const message = { relation: "", updatedPermission: 0 };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            runtime_3.reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* authzed.api.v1.SubjectReference subject */ 1:
                    message.subject = core_2.SubjectReference.internalBinaryRead(reader, reader.uint32(), options, message.subject);
                    break;
                case /* authzed.api.v1.ObjectReference resource */ 2:
                    message.resource = core_1.ObjectReference.internalBinaryRead(reader, reader.uint32(), options, message.resource);
                    break;
                case /* string relation */ 3:
                    message.relation = reader.string();
                    break;
                case /* authzed.api.v1alpha1.PermissionUpdate.Permissionship updated_permission */ 4:
                    message.updatedPermission = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* authzed.api.v1.SubjectReference subject = 1; */
        if (message.subject)
            core_2.SubjectReference.internalBinaryWrite(message.subject, writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* authzed.api.v1.ObjectReference resource = 2; */
        if (message.resource)
            core_1.ObjectReference.internalBinaryWrite(message.resource, writer.tag(2, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* string relation = 3; */
        if (message.relation !== "")
            writer.tag(3, runtime_1.WireType.LengthDelimited).string(message.relation);
        /* authzed.api.v1alpha1.PermissionUpdate.Permissionship updated_permission = 4; */
        if (message.updatedPermission !== 0)
            writer.tag(4, runtime_1.WireType.Varint).int32(message.updatedPermission);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v1alpha1.PermissionUpdate
 */
exports.PermissionUpdate = new PermissionUpdate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WatchResourcesResponse$Type extends runtime_5.MessageType {
    constructor() {
        super("authzed.api.v1alpha1.WatchResourcesResponse", [
            { no: 1, name: "updates", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.PermissionUpdate },
            { no: 2, name: "changes_through", kind: "message", T: () => core_3.ZedToken }
        ]);
    }
    create(value) {
        const message = { updates: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            runtime_3.reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated authzed.api.v1alpha1.PermissionUpdate updates */ 1:
                    message.updates.push(exports.PermissionUpdate.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* authzed.api.v1.ZedToken changes_through */ 2:
                    message.changesThrough = core_3.ZedToken.internalBinaryRead(reader, reader.uint32(), options, message.changesThrough);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated authzed.api.v1alpha1.PermissionUpdate updates = 1; */
        for (let i = 0; i < message.updates.length; i++)
            exports.PermissionUpdate.internalBinaryWrite(message.updates[i], writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* authzed.api.v1.ZedToken changes_through = 2; */
        if (message.changesThrough)
            core_3.ZedToken.internalBinaryWrite(message.changesThrough, writer.tag(2, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v1alpha1.WatchResourcesResponse
 */
exports.WatchResourcesResponse = new WatchResourcesResponse$Type();
/**
 * @generated ServiceType for protobuf service authzed.api.v1alpha1.WatchResourcesService
 */
exports.WatchResourcesService = new runtime_rpc_1.ServiceType("authzed.api.v1alpha1.WatchResourcesService", [
    { name: "WatchResources", serverStreaming: true, options: { "google.api.http": { body: "*", post: "/v1alpha1/lookupwatch" } }, I: exports.WatchResourcesRequest, O: exports.WatchResourcesResponse }
]);
//# sourceMappingURL=watchresources_service.js.map