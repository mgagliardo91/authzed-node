"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WatchService = exports.WatchResponse = exports.WatchRequest = void 0;
// @generated by protobuf-ts 2.0.7 with parameter generate_dependencies,long_type_string,client_grpc1
// @generated from protobuf file "authzed/api/v1/watch_service.proto" (package "authzed.api.v1", syntax proto3)
// tslint:disable
const runtime_rpc_1 = require("@protobuf-ts/runtime-rpc");
const runtime_1 = require("@protobuf-ts/runtime");
const runtime_2 = require("@protobuf-ts/runtime");
const runtime_3 = require("@protobuf-ts/runtime");
const runtime_4 = require("@protobuf-ts/runtime");
const runtime_5 = require("@protobuf-ts/runtime");
const core_1 = require("./core");
const core_2 = require("./core");
// @generated message type with reflection information, may provide speed optimized methods
class WatchRequest$Type extends runtime_5.MessageType {
    constructor() {
        super("authzed.api.v1.WatchRequest", [
            { no: 1, name: "optional_object_types", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { repeated: { minItems: "0", items: { string: { maxBytes: "128", pattern: "^([a-z][a-z0-9_]{1,62}[a-z0-9]/)?[a-z][a-z0-9_]{1,62}[a-z0-9]$" } } } } } },
            { no: 2, name: "optional_start_cursor", kind: "message", T: () => core_2.ZedToken }
        ]);
    }
    create(value) {
        const message = { optionalObjectTypes: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            runtime_3.reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string optional_object_types */ 1:
                    message.optionalObjectTypes.push(reader.string());
                    break;
                case /* authzed.api.v1.ZedToken optional_start_cursor */ 2:
                    message.optionalStartCursor = core_2.ZedToken.internalBinaryRead(reader, reader.uint32(), options, message.optionalStartCursor);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated string optional_object_types = 1; */
        for (let i = 0; i < message.optionalObjectTypes.length; i++)
            writer.tag(1, runtime_1.WireType.LengthDelimited).string(message.optionalObjectTypes[i]);
        /* authzed.api.v1.ZedToken optional_start_cursor = 2; */
        if (message.optionalStartCursor)
            core_2.ZedToken.internalBinaryWrite(message.optionalStartCursor, writer.tag(2, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v1.WatchRequest
 */
exports.WatchRequest = new WatchRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WatchResponse$Type extends runtime_5.MessageType {
    constructor() {
        super("authzed.api.v1.WatchResponse", [
            { no: 1, name: "updates", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => core_1.RelationshipUpdate },
            { no: 2, name: "changes_through", kind: "message", T: () => core_2.ZedToken }
        ]);
    }
    create(value) {
        const message = { updates: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            runtime_3.reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated authzed.api.v1.RelationshipUpdate updates */ 1:
                    message.updates.push(core_1.RelationshipUpdate.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* authzed.api.v1.ZedToken changes_through */ 2:
                    message.changesThrough = core_2.ZedToken.internalBinaryRead(reader, reader.uint32(), options, message.changesThrough);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated authzed.api.v1.RelationshipUpdate updates = 1; */
        for (let i = 0; i < message.updates.length; i++)
            core_1.RelationshipUpdate.internalBinaryWrite(message.updates[i], writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* authzed.api.v1.ZedToken changes_through = 2; */
        if (message.changesThrough)
            core_2.ZedToken.internalBinaryWrite(message.changesThrough, writer.tag(2, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v1.WatchResponse
 */
exports.WatchResponse = new WatchResponse$Type();
/**
 * @generated ServiceType for protobuf service authzed.api.v1.WatchService
 */
exports.WatchService = new runtime_rpc_1.ServiceType("authzed.api.v1.WatchService", [
    { name: "Watch", serverStreaming: true, options: { "google.api.http": { body: "*", post: "/v1/watch" } }, I: exports.WatchRequest, O: exports.WatchResponse }
]);
//# sourceMappingURL=watch_service.js.map